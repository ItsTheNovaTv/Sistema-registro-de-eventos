import { db } from "./Firebase.js";
import {
  collection,
  doc,
  getDocs
} from "https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js";


// üîπ A√ëOS DISPONIBLES
export async function obtenerA√±os() {
  const a√±oActual = new Date().getFullYear();
  const a√±os = [];
  for (let a√±o = 2000; a√±o <= a√±oActual; a√±o++) {
    a√±os.push(a√±o.toString());
  }
  return a√±os.reverse(); // orden del m√°s nuevo al m√°s viejo
}


// üîπ USUARIOS
export async function obtenerUsuarios() {
  const ref = collection(db, "usuarios");
  const snapshot = await getDocs(ref);
  const usuarios = snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  }));
  console.log("Usuarios:", usuarios);
  return usuarios;
}


export async function obtenerEventos(a√±o) {
    if (!a√±o) throw new Error("‚ùå El a√±o no puede estar vac√≠o.");
  
    // Este es el documento "eventos", no una colecci√≥n
    const eventoRuta = `${a√±o}/eventos`; // ‚Üê documento
    const programacionRef = collection(db, `${eventoRuta}/programacion`); // ‚Üê una de las colecciones internas
  
    // üîé TRUCO: listar manualmente las subcolecciones que t√∫ sepas que existen
    // Como no puedes hacer listCollections desde CDN, aqu√≠ solo puedes devolver una lista manual o fija
    // O, si sabes que "programacion", "robotica" son las subcolecciones:
    return ["programacion", "robotica"];
  }


// üîπ MODALIDADES por evento
// Dentro de: /2025/eventos/{evento} ‚Üí accedemos a los documentos: estructuras complejas, hacka, etc.
export async function obtenerModalidades(a√±o, evento) {
  const modalidadesRef = collection(db, `${a√±o}/eventos/${evento}`);
  const snapshot = await getDocs(modalidadesRef);
  return snapshot.docs.map(doc => doc.id); // nombres de las modalidades (documentos)
}


// üîπ EQUIPOS por modalidad
// Dentro de: /2025/eventos/{evento}/{modalidad}/equipos
export async function obtenerEquipos(a√±o, evento, modalidad) {
  const equiposRef = collection(db, `${a√±o}/eventos/${evento}/${modalidad}/equipos`);
  const snapshot = await getDocs(equiposRef);
  return snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  }));
}
